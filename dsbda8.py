# -*- coding: utf-8 -*-
"""DSBDA8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UdVGYQvxFb-IxhyPSE5cAZuA9X-i25IV
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings

warnings.filterwarnings('ignore')

df = sns.load_dataset('titanic')

df.head()

df.shape

df.info()

df.isnull().sum()









df.describe()

df['age'].fillna(df['age'].mean(), inplace=True)

df.isnull().sum()

df['embarked'].value_counts()

df['embarked'].fillna('S', inplace=True)

df.isnull().sum()

df['deck'].value_counts()



df['deck'].fillna(method='ffill', inplace=True)

df.isnull().sum()

df['deck'].fillna(method='bfill', inplace=True)

df.isnull().sum()

df['embark_town'].value_counts()

df['embark_town'].fillna('Southampton', inplace=True)

df.isnull().sum()

"""## EDA (Exploratory Data Analysis )
### Use the inbuilt dataset 'titanic'. The dataset contains 891 rows and contains information about the passengers who boarded the unfortunate Titanic ship. Use the Seaborn library to see if we can find any patterns in the data.
"""





df.info()

df['survived'].value_counts()

df['pclass'].value_counts()

df['sex'].value_counts()

df['age'].value_counts()

df['sibsp'].value_counts()

df['parch'].value_counts()

df['fare'].value_counts()

df['embarked'].value_counts()

df['who'].value_counts()

"""### Write a code to check how the price of the ticket (column name: 'fare') for each passenger is distributed by plotting a histogram."""

plt.figure(figsize = (10,7))
sns.histplot(df['age'],bins=10)









plt.figure(figsize = (10,7))
sns.histplot(df['fare'],bins = 10)

plt.figure(figsize=(10,7))
sns.boxplot(df['age'])









plt.figure(figsize=(10,7))
sns.boxplot(df['fare'])

plt.figure(figsize=(10,7))
sns.distplot(df['age'])







plt.figure(figsize=(10,7))
sns.distplot(df['fare'])

sns.kdeplot(df['age'])













sns.kdeplot(df['fare'])

df.info()

df['age'].skew()

df['fare'].skew()

df[df['fare']>300]

# Defining function for Outliers Treatment
def Outlier_Treatment(col):
  Q1 = df[col].quantile(0.25)
  Q3 = df[col].quantile(0.75)
  IQR = Q3 - Q1
  upper = Q3 + (1.5 * IQR)
  lower = Q1 - (1.5 * IQR)
  np.clip(df[col], lower, upper, inplace = True)

Outlier_Treatment('age')
plt.figure(figsize = (10,7))
sns.boxplot(df['age'])

Outlier_Treatment('fare')
plt.figure(figsize = (10,7))
sns.boxplot(df['fare'])







plt.figure(figsize = (10,7))
sns.countplot(data = df, x ='survived')

plt.figure(figsize = (10,7))
sns.countplot(data = df, x ='pclass')







plt.figure(figsize = (10,7))
sns.countplot(data = df, x ='sex')

plt.figure(figsize = (10,7))
sns.countplot(data = df, x ='deck')







df['deck'].value_counts().plot(kind='pie',autopct='%.3f%%')

df['survived'].value_counts().plot(kind='pie',autopct='%.3f%%')

df['embarked'].value_counts().plot(kind='pie',autopct='%.3f%%')









sns.scatterplot(x='age', y='fare', data=df)
plt.show()

sns.pairplot(data=df)
plt.show()

sns.boxplot(x='survived', y='age',data=df)

sns.barplot(x='survived', y='age',data=df)

sns.barplot(x='survived', y='fare',data=df)

sns.barplot(x='class', y='fare',data=df)



sns.barplot(x='sex', y='survived',data=df)

sns.heatmap(pd.crosstab(df['survived'],df['sex']), annot=True)

sns.heatmap(pd.crosstab(df['survived'],df['class']), annot=True)

sns.clustermap(pd.crosstab(df['survived'],df['class']), annot=True)