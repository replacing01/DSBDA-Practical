# -*- coding: utf-8 -*-
"""DSBDA5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14FUW_byEvD1LXkHXRDpZ--c5FilKPB6s
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings

warnings.filterwarnings('ignore')

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Social_Network_Ads.csv')

df.head()

df.describe()

df.shape

df.isnull().sum()

df.info()

# Gender Categories Change

df['Gender'].value_counts()

df['Gender'].replace(['Female', 'Male'], [0,1], inplace = True)

df.info()

# Droping Unique values
df['User ID'].nunique()

df.drop(['User ID'], axis = 1, inplace = True)

df.info()

sns.kdeplot(x='Age', data = df)
plt.show()

# EDA (Exploratory Data Analysis)

for i in df.columns:
  plt.figure(figsize = (8, 4))
  sns.boxplot(x = i, data = df)
  plt.show()

sns.kdeplot(x='EstimatedSalary', data = df)
plt.show()

# Normally Distributed
df['EstimatedSalary'].skew()

# Normally Distributed
df['Age'].skew()

sns.countplot(x = 'Gender', data = df)









sns.countplot(x = 'Purchased', data = df)

#Separating independent and dependent varibale
x = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

#implementing train_test_ split model
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=0)

#feature Scaling
from sklearn.preprocessing import StandardScaler
st_x=StandardScaler()
x_train = st_x.fit_transform(x_train)
x_test = st_x.transform(x_test)

# Fitting Logistic Regression to the training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(x_train, y_train)

# Predicting the test set result
y_pred = classifier.predict(x_test)

# Testing the accuracy of the result

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score

confusion_matrix(y_test, y_pred)

accuracy_score(y_test, y_pred)

precision_score(y_test, y_pred)

